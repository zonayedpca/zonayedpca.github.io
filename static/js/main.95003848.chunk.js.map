{"version":3,"sources":["components/common/Loader.js","components/common/Error.js","components/IntroArea.js","components/Project.js","components/ReposArea.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Loader","react_default","a","createElement","className","Error","_ref","children","IntroArea","state","profile","error","getData","_callee","_ref2","regenerator_default","wrap","_context","prev","next","axios","sent","data","_this","setState","t0","stop","this","renderUser","_this$state","Fragment","alt","src","avatar_url","name","login","bio","public_repos","Error_Error","response","statusText","Loader_Loader","Component","Project","_ref$repo","repo","html_url","description","language","forks_count","target","rel","href","ReposArea","repos","repos1","_ref3","repos2","concat","Object","toConsumableArray","renderRepos","map","components_Project","key","id","Footer","App","components_IntroArea","components_ReposArea","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95003848.chunk.js","sourcesContent":["import React from 'react';\n\nconst Loader = () => (\n  <div className=\"loader\">\n  </div>\n)\n\nexport { Loader };\n","import React from 'react';\n\nconst Error = ({ children }) => (\n  <div className=\"error-area\">\n    <div className=\"error\">\n      <p className=\"code\">404</p>\n      {children}\n    </div>\n  </div>\n)\n\nexport { Error };\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport { Loader, Error } from './common';\n\nclass IntroArea extends Component {\n  state = {\n    profile: '',\n    error: ''\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  getData = async() => {\n    try {\n      const { data: profile } = await axios(`https://api.github.com/users/zonayedpca`);\n      this.setState({ profile });\n    } catch(err) {\n      this.setState({ error: err });\n    }\n  }\n\n  renderUser = () => {\n    const { profile, error } = this.state;\n    if(profile) {\n      return (\n        <React.Fragment>\n          <div className=\"img\">\n            <img alt=\"profile\" src={profile.avatar_url} />\n          </div>\n          <h1>{profile.name}</h1>\n          <p className=\"username\">{profile.login}</p>\n          <p className=\"bio\">{profile.bio}</p>\n          <p className=\"list\"><strong>{profile.public_repos}</strong> Repository</p>\n        </React.Fragment>\n      )\n    } else if(error) {\n      return (\n        <Error>\n          <p>{error.response.statusText}</p>\n        </Error>\n      )\n    }\n    return (\n      <div>\n        <Loader />\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"intro-area\">\n        <div className=\"container\">\n          <div className=\"intro\">\n            {this.renderUser()}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default IntroArea;\n","import React from 'react';\n\nconst Project = ({ repo: { html_url, name, description, language, forks_count } }) => (\n  <div className=\"repo\">\n    <h3><a target=\"_blank\" rel=\"noopener noreferrer\" href={html_url}>{name}</a></h3>\n    <p>{description ? description : 'No Description Found!'}</p>\n    <ul>\n      {language && <li>{language}</li>}\n      {forks_count > 0 && <li>{forks_count}</li>}\n    </ul>\n  </div>\n)\n\nexport default Project;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport Project from './Project';\nimport { Loader, Error } from './common';\n\nclass ReposArea extends Component {\n  state = {\n    repos: '',\n    error: ''\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  getData = async() => {\n    try {\n      const { data: repos1 } = await axios(`https://api.github.com/users/zonayedpca/repos?page=1&sort=created&type=owner`);\n      const { data: repos2 } = await axios(`https://api.github.com/users/zonayedpca/repos?page=2&sort=created&type=owner`);\n      let repos = [...repos1, ...repos2];\n      this.setState({ repos });\n    } catch(err) {\n      this.setState({ error: 'Somthing went wrong!' })\n    }\n  }\n\n  renderRepos = () => {\n    const { repos, error } = this.state;\n    if(repos) {\n      return (\n        repos.map(repo => (\n          <Project key={repo.id} repo={repo} />\n        ))\n      )\n    } else if(error) {\n      return (\n        <Error>\n          <p>{error}</p>\n        </Error>\n      )\n    }\n    return (\n      <Loader />\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"repos-area\">\n        <div className=\"container\">\n          <div className=\"repos\">\n            {this.renderRepos()}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ReposArea;\n","import React from 'react';\n\nconst Footer = () => (\n  <footer className=\"footer-area\">\n    <div className=\"container\">\n      <div className=\"footer\">\n        <ul>\n          <li>Thanks</li>\n          <li>ধন্যবাদ</li>\n        </ul>\n        <p>From <strong>Zonayed Ahmed</strong></p>\n      </div>\n    </div>\n  </footer>\n);\n\nexport default Footer;\n","import React, { Component } from 'react';\n\nimport IntroArea from './components/IntroArea';\nimport ReposArea from './components/ReposArea';\nimport Footer from './components/Footer';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <IntroArea />\n        <ReposArea />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}